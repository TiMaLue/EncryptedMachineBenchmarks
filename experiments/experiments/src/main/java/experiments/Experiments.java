/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package experiments;

import ai.libs.jaicore.db.IDatabaseConfig;
import ai.libs.jaicore.experiments.ExperimentDatabasePreparer;
import ai.libs.jaicore.experiments.ExperimentRunner;
import ai.libs.jaicore.experiments.IExperimentSetConfig;
import ai.libs.jaicore.experiments.IExperimentSetEvaluator;
import ai.libs.jaicore.experiments.databasehandle.ExperimenterMySQLHandle;
import ai.libs.jaicore.experiments.exceptions.ExperimentAlreadyExistsInDatabaseException;
import ai.libs.jaicore.experiments.exceptions.ExperimentDBInteractionFailedException;
import ai.libs.jaicore.experiments.exceptions.IllegalExperimentSetupException;
import org.aeonbits.owner.ConfigFactory;
import org.api4.java.algorithm.exceptions.AlgorithmExecutionCanceledException;
import org.api4.java.algorithm.exceptions.AlgorithmTimeoutedException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;

public class Experiments {

	private static final Logger logger = LoggerFactory.getLogger(Experiments.class);

	private final String targetExperiment;
	private final IExperimentSetConfig expConfig;


	public Experiments(String targetExperimentConfigPath) {
		this.targetExperiment = targetExperimentConfigPath;
		this.expConfig = (IExperimentSetConfig) ConfigFactory.create(IExperimentSetConfig.class).loadPropertiesFromFile(new File(targetExperiment));

	}

	private void prepareEntries(IDatabaseConfig dbConfig) {
		ExperimenterMySQLHandle handle = new ExperimenterMySQLHandle(dbConfig);
		try {
			handle.setup(expConfig);
		} catch (ExperimentDBInteractionFailedException e) {
			System.err.println("Couldn't setup the sql handle.");
			e.printStackTrace();
			System.exit(1);
		}
		handle = new ExperimenterMySQLHandle(dbConfig);
		ExperimentDatabasePreparer preparer = new ExperimentDatabasePreparer(expConfig, handle);
		try {
			preparer.synchronizeExperiments();
		} catch (ExperimentDBInteractionFailedException | IllegalExperimentSetupException | AlgorithmTimeoutedException
				 | InterruptedException | AlgorithmExecutionCanceledException | ExperimentAlreadyExistsInDatabaseException e) {
			System.err.println("Couldn't synchrinze experiment table.");
			e.printStackTrace();
			System.exit(1);
		}
	}

	private void runExperiments(IDatabaseConfig databaseConfig, int experimentCount) {
		if (experimentCount <= 0) {
			throw new IllegalArgumentException("Experiment count is unexpected: " + experimentCount);
		}
		ExperimenterMySQLHandle handle = new ExperimenterMySQLHandle(databaseConfig);
		IExperimentSetEvaluator evaluator = new MpcbenchrunnerEvaluator();
		try {
			ExperimentRunner runner = new ExperimentRunner(expConfig, evaluator, handle);
			runner.sequentiallyConductExperiments(experimentCount);
		} catch (ExperimentDBInteractionFailedException | InterruptedException e) {
			logger.error("Error trying to run experiments.", e);
			System.exit(1);
		}
	}

	public static void main(String[] args) throws IOException {
		if(args.length < 1) {
			throw new RuntimeException("Expected experiment file as first arg.");
		}
		String experimentFilePath = args[0];
		int experimentCount = 1000;
		if(args.length >= 2) {
			experimentCount = Integer.parseInt(args[1]);
		}
		String database;
		if(args.length >= 3) {
			database = args[2];
		} else {
			database = new File(experimentFilePath).getName();
			if(database.endsWith(".experiment")) {
				database = database.substring(0, database.length() - ".experiment".length());
			}
		}
		IDatabaseConfig dbConfig = (IDatabaseConfig) ConfigFactory.create(IDatabaseConfig.class).loadPropertiesFromFile(new File("runtime_configs/db.properties"));
		dbConfig.setProperty("db.table", database);
		logger.info("Running {} many experiments of config {} and storing the results in {}.",
				experimentCount, experimentFilePath, database);
		Experiments experiments = new Experiments(experimentFilePath);
		experiments.prepareEntries(dbConfig);
		experiments.runExperiments(dbConfig, experimentCount);
//		Runtime.getRuntime().exec("systemctl suspend");
	}
}
