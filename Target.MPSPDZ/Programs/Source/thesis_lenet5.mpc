from Compiler import ml
from Compiler.types import sfix, sint
import torch
from Models.LeNet5 import LeNet5_MPSPDZ as LeNet5
import configparser
import os
from torchvision.datasets import MNIST

# load config
program.options_from_args()
config = configparser.ConfigParser()
config.read("/scheduler/config.ini")

dataset_size = int(os.environ["DATASET_SIZE"])
#batch_size = int(os.environ["BATCH_SIZE"])
batch_size = 32
dataset_size = 5
if 'notorch' in program.args:
# normalize to [0,1] before input
    samples = sfix.Tensor([dataset_size, 28, 28])
    labels = sint.Tensor([dataset_size, 1])
    samples.input_from(0)
    labels.input_from(0)

else:
# data preprocessing
    ds = MNIST(root=config["Dataset"]["RootDir"], train=False, download=True)
    short_ds = ds.data[:dataset_size]
# normalize to [0,1] before input
    samples = sfix.input_tensor_via(0, short_ds / 255.)
    labels = sint.input_tensor_via(0, ds.targets, one_hot=True)

# load model and read into MP-SPDZ
lenet = LeNet5()
save_path = "".join(
    [config["Models"]["SaveDir"], lenet.model_name, config["Models"]["Postfix"]]
)
lenet.load_state_dict(torch.load(save_path, weights_only=True)) 
layers = ml.layers_from_torch(lenet, samples.shape, batch_size, input_via=1)

ml.set_n_threads(int(config["MP_SPDZ"]["NumThreads"]))

optimizer = ml.SGD(layers)
n_correct, loss = optimizer.reveal_correctness(samples, labels, batch_size, running=True)
print_ln("Secure accuracy: %s/%s", n_correct, len(samples))
