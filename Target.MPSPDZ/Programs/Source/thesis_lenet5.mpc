from Compiler import ml
from Compiler.types import sfix, sint
import torch
from Models.LeNet5 import LeNet5_ReLU
import configparser

# load config
program.options_from_args()
config = configparser.ConfigParser()
config.read(program.args[1])

dataset_size = int(os.environ["DATASET_SIZE"])
batch_size = int(os.environ["BATCH_SIZE"])

# normalize to [0,1] before input
samples = sfix.Tensor([dataset_size, 28, 28])
labels = sint.Tensor([dataset_size, 1])
samples.input_from(0)
labels.input_from(0)

# load model and read into MP-SPDZ
lenet = LeNet5_ReLU()
save_path = "".join(
    [config["Models"]["SaveDir"], lenet.model_name, config["Models"]["Postfix"]]
)
lenet.load_state_dict(torch.load(save_path, weights_only=True))
layers = ml.layers_from_torch(lenet, samples.shape, batch_size)

ml.set_n_threads(int(config["MP_SPDZ"]["NumThreads"]))

optimizer = ml.SGD(layers)
n_correct, loss = optimizer.reveal_correctness(samples, labels, batch_size, running=True)
print_ln("Secure accuracy: %s/%s", n_correct, len(samples))
